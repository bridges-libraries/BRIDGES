# This workflow creates the deployement on github. 
name: Deploy

# Controls the event triggering the workflow
on:
  # Gives the possibility to trigger the workflow manually.
  workflow_dispatch:
    inputs:
      version:
        description: 'Package Version: v[Major].[Minor].[Patch]'
        required: true
        type: string
    
env:
  # Path of the Project being Tested and Packaged.
  PROJECT_PATH: 'BRIDGES/BRIDGES.csproj'
  # Output directory for the NuGet Package
  PKG_OUTPUT_DIR: ${{ github.workspace }}/output
  # URL of the GitHub Package Repository
  NUGET_SRC_URL: https://nuget.pkg.github.com/bridges-libraries/index.json

  # Token automatically generated by GitHub for the workflow
  GITHUB_TOKEN: ${{ github.token }}
    
jobs:
  # Verify the inputs & Set up the workflow
  verify_inputs:
  
    runs-on : ubuntu-latest
    
    # Map a step output to a job output
    outputs:
      version_number : ${{ steps.verify-version.outputs.PKG_VERSION_NUMBER }}
      
    steps:
      - name: Verify branch
        shell: bash
        run: |
          if [[ ${{github.ref}} =~ .*master$ ]]
          then
            echo "The reference branch is 'master'"
          elif [[ ${{github.ref}} =~ ^.*/release/.*$ ]]
          then
            echo "The reference branch is 'release'"
          elif [[ ${{github.ref}} =~ .*develop$ ]]
          then
            echo "The reference branch is 'develop'"
          else
            exit 1
          fi
      - name: Verify version & Get version number 
        id: verify-version
        shell: bash
        run : |
          version=${{inputs.version}}
          if [[ ${version} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]
          then
            echo "PKG_VERSION_NUMBER=${version:1}" >> $GITHUB_OUTPUT
          else
            echo "The package version must start with 'v'."
            exit 1
          fi
  
  # Build the NuGet package & Publish it on GitHub Packages
  deploy_package:
    needs : verify_inputs
    
    runs-on : ubuntu-latest
    
    steps: 
    # Check-out the branch
    - name: Check-out Branch
      uses: actions/checkout@v3
    # Setup the .Net environment
    - name: Check-out Branch
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    # Build the solution
    - name: Build Solution
      run: dotnet build --configuration Release
    # Runs the unit tests
    - name : Test Project
      run: dotnet test --verbosity normal
    # Pack the project in a NuGet package
    - name: Create NuGet
      run: |
        if [[ ${{github.ref}} =~ .*master$ ]]
        then
          dotnet pack ${{env.PROJECT_PATH}} -p:PackageId='BRIDGES' -p:PackageVersion=${{needs.verify_inputs.outputs.version_number}} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output ${{ env.PKG_OUTPUT_DIR }}
        elif [[ ${{github.ref}} =~ ^.*/release/.*$ ]]
        then
          dotnet pack ${{env.PROJECT_PATH}} -p:PackageId='BRIDGES' -p:PackageVersion=${{needs.verify_inputs.outputs.version_number}}-beta -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output ${{ env.PKG_OUTPUT_DIR }}
        elif [[ ${{github.ref}} =~ .*develop$ ]]
        then
          dotnet pack ${{env.PROJECT_PATH}} -p:PackageId='BRIDGES-Dev' -p:PackageVersion=${{needs.verify_inputs.outputs.version_number}}-beta -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg --output ${{ env.PKG_OUTPUT_DIR }}
        else
          echo "::error file=deploy.yml,line=94,col=9,endColumn=13::Wrong branch for deployement"
          exit 1
        fi
        
    # Publish the NuGet package on GitHub
    - name: Publish NuGet Package
      run: |
        dotnet nuget push ${{ env.PKG_OUTPUT_DIR }}/*.nupkg --api-key ${{ env.GITHUB_TOKEN }} --source ${{ env.NUGET_SRC_URL }}
        dotnet nuget push ${{ env.PKG_OUTPUT_DIR }}/*.snupkg --api-key ${{ env.GITHUB_TOKEN }} --source ${{ env.NUGET_SRC_URL }}
    # Upload the artefacts (Package and Symbols)
    - name: Upload Github Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package
        path: ${{ env.PKG_OUTPUT_DIR }}/*
  
  # Tag the commit with the package version 
  tag_commit:
    needs : deploy_package
    
    runs-on : ubuntu-latest
    
    steps:
      # Create a tag on the latest commit of the branch
      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{inputs.version}}',
              sha: context.sha
            })
            
  # Create a (Pre-)Release on Github
  release_package:
    needs : tag_commit
    if : ${{ endsWith( github.ref , 'master') || contains( github.ref , '/release/') }}
    
    runs-on : ubuntu-latest
    
    steps:
      # Download the artefacts (Package and Symbols)
      - name: Download Github Artifacts
        uses: actions/download-artifact@v3
        with:
          name: package
          path: ${{ env.PKG_OUTPUT_DIR }}/
      # Evaluate whether the Release should be a pre-release or not
      - name: Evaluate if Pre-Release
        shell: bash
        run : |
          if [[ ${{github.ref}} =~ .*master$ ]]
          then
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          elif [[ ${{github.ref}} =~ ^.*/release/.*$ ]]
          then
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "The package should not be released."
            exit 1
          fi
      # Publish the Release
      - name: Publish Release 
        uses: ncipollo/release-action@v1
        with :
          prerelease : ${{env.IS_PRERELEASE}}
          artifacts: ${{ env.PKG_OUTPUT_DIR }}/*
          tag : ${{inputs.version}}
        
