using System;
using System.Collections.Generic;

using Euc3D = BRIDGES.Geometry.Euclidean3D;

using BRIDGES.LinearAlgebra.Vectors;
using BRIDGES.LinearAlgebra.Matrices;
using BRIDGES.LinearAlgebra.Matrices.Sparse;
using BRIDGES.LinearAlgebra.Matrices.Storage;

using BRIDGES.Solvers.GuidedProjection;
using BRIDGES.Solvers.GuidedProjection.Interfaces;
using BRIDGES.Solvers.GuidedProjection.EnergyTypes;
using BRIDGES.Solvers.GuidedProjection.QuadraticConstraintTypes;


namespace BRIDGES.ConsoleApp.Examples.GuidedProjection
{
    internal class DualContour
    {
        internal static void CoreFunction()
        {
            #region Target Geometry

            int sideCount = 8;
            int[] sideSegmentCount = new int[] { 64, 64, 64, 64, 64, 64, 64, 64 };

            int totalSegmentCount = 0;
            for (int i = 0; i < sideCount; i++) { totalSegmentCount += sideSegmentCount[i]; }


            double[] sideLength = new double[] { 4, 9.7, 4, 7.3, 4, 9.7, 4, 7.3 };
            double[][] sideSegmentLength = new double[sideCount][];

            Euc3D.Vector[][] sideSegmentDir = new Euc3D.Vector[sideCount][];


            int i_CurrentSide;


            /********** Side 0 **********/

            i_CurrentSide = 0;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (-0.999924,-0.012345,0), (-0.999521,-0.030947,0), (-0.998743,-0.050115,0), (-0.99759,-0.069387,0), (-0.996091,-0.088337,0),
                    (-0.994191,-0.107632,0), (-0.991931,-0.126776,0), (-0.989252,-0.146218,0), (-0.986207,-0.165516,0), (-0.982728,-0.185054,0),
                    (-0.978874,-0.204465,0), (-0.97458,-0.224039,0), (-0.969892,-0.243537,0), (-0.964747,-0.263178,0), (-0.959188,-0.28277,0),
                    (-0.953148,-0.302505,0), (-0.946675,-0.322191,0), (-0.939712,-0.341968,0), (-0.93229,-0.361711,0), (-0.924372,-0.381493,0),
                    (-0.915955,-0.401281,0), (-0.90703,-0.421067,0), (-0.897582,-0.440848,0), (-0.887593,-0.460628,0), (-0.877059,-0.480383,0),
                    (-0.865962,-0.500109,0), (-0.85429,-0.519796,0), (-0.84204,-0.539415,0), (-0.829191,-0.558965,0), (-0.815726,-0.578439,0),
                    (-0.80164,-0.597807,0), (-0.786948,-0.61702,0), (-0.771591,-0.636119,0), (-0.75562,-0.65501,0), (-0.738995,-0.673711,0),
                    (-0.721749,-0.692155,0), (-0.703841,-0.710357,0), (-0.6853,-0.728261,0), (-0.666114,-0.74585,0), (-0.646279,-0.763101,0),
                    (-0.625791,-0.779991,0), (-0.60466,-0.796484,0), (-0.582912,-0.812535,0), (-0.56055,-0.828121,0), (-0.537586,-0.843209,0),
                    (-0.514088,-0.857737,0), (-0.490031,-0.871705,0), (-0.465458,-0.88507,0), (-0.440352,-0.897825,0), (-0.414825,-0.909901,0),
                    (-0.388922,-0.921271,0), (-0.362878,-0.931837,0), (-0.336312,-0.941751,0), (-0.309434,-0.950921,0), (-0.281883,-0.959449,0),
                    (-0.253949,-0.967218,0), (-0.22562,-0.974215,0), (-0.197053,-0.980393,0), (-0.168848,-0.985642,0), (-0.140664,-0.990057,0),
                    (-0.112299,-0.993674,0), (-0.083426,-0.996514,0), (-0.055307,-0.998469,0), (-0.030299,-0.999541,0)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 1 **********/

            i_CurrentSide = 1;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.151562, 0.151563, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562,
                0.151562, 0.151563, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562,
                0.151562, 0.151563, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563, 0.151562, 0.151563,
                0.151562, 0.151563, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562,
                0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151563,
                0.151562, 0.151563, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563, 0.151562, 0.151563,
                0.151563, 0.151562, 0.151562, 0.151563
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (-0.034381,0,0.999409), (-0.112976,0,0.993598), (-0.188169,0,0.982137), (-0.243986,0,0.969779), (-0.326599,0,0.945163),
                    (-0.376425,0,0.926447), (-0.437816,0,0.899065), (-0.482158,0,0.876084), (-0.538099,0,0.842882), (-0.575295,0,0.817946),
                    (-0.620035,0,0.784574), (-0.650527,0,0.759483), (-0.687909,0,0.725797), (-0.713377,0,0.70078), (-0.742178,0,0.670203),
                    (-0.762275,0,0.647253), (-0.786367,0,0.61776), (-0.802289,0,0.596935), (-0.820143,0,0.572159), (-0.832338,0,0.554269),
                    (-0.846765,0,0.531967), (-0.855992,0,0.51699), (-0.8665,0,0.499178), (-0.873386,0,0.487028), (-0.881379,0,0.47241),
                    (-0.886368,0,0.462981), (-0.891808,0,0.452415), (-0.89516,0,0.445745), (-0.898716,0,0.438532), (-0.900658,0,0.434528),
                    (-0.902341,0,0.431023), (-0.902982,0,0.429678), (-0.902982,0,0.429678), (-0.902341,0,0.431023), (-0.900658,0,0.434528),
                    (-0.898716,0,0.438532), (-0.89516,0,0.445745), (-0.891808,0,0.452415), (-0.886368,0,0.462981), (-0.881379,0,0.47241),
                    (-0.873386,0,0.487028), (-0.8665,0,0.499178), (-0.855992,0,0.51699), (-0.846765,0,0.531967), (-0.832338,0,0.554269),
                    (-0.820143,0,0.572159), (-0.802289,0,0.596935), (-0.786367,0,0.61776), (-0.762275,0,0.647253), (-0.742178,0,0.670203),
                    (-0.713377,0,0.70078), (-0.687909,0,0.725797), (-0.650527,0,0.759483), (-0.620035,0,0.784574), (-0.575295,0,0.817946),
                    (-0.538099,0,0.842882), (-0.482158,0,0.876084), (-0.437816,0,0.899065), (-0.376425,0,0.926447), (-0.326599,0,0.945163),
                    (-0.243986,0,0.969779), (-0.188169,0,0.982137), (-0.112976,0,0.993598), (-0.034381,0,0.999409)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 2 **********/

            i_CurrentSide = 2;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (-0.030299,0.999541,0), (-0.055307,0.998469,0), (-0.083426,0.996514,0), (-0.112299,0.993674,0), (-0.140664,0.990057,0),
                    (-0.168848,0.985642,0), (-0.197053,0.980393,0), (-0.22562,0.974215,0), (-0.253949,0.967218,0), (-0.281883,0.959449,0),
                    (-0.309434,0.950921,0), (-0.336312,0.941751,0), (-0.362878,0.931837,0), (-0.388922,0.921271,0), (-0.414825,0.909901,0),
                    (-0.440352,0.897825,0), (-0.465458,0.88507,0), (-0.490031,0.871705,0), (-0.514088,0.857737,0), (-0.537586,0.843209,0),
                    (-0.56055,0.828121,0), (-0.582912,0.812535,0), (-0.60466,0.796484,0), (-0.625791,0.779991,0), (-0.646279,0.763101,0),
                    (-0.666114,0.74585,0), (-0.6853,0.728261,0), (-0.703841,0.710357,0), (-0.721749,0.692155,0), (-0.738995,0.673711,0),
                    (-0.75562,0.65501,0), (-0.771591,0.636119,0), (-0.786948,0.61702,0), (-0.80164,0.597807,0), (-0.815726,0.578439,0),
                    (-0.829191,0.558965,0), (-0.84204,0.539415,0), (-0.85429,0.519796,0), (-0.865962,0.500109,0), (-0.877059,0.480383,0),
                    (-0.887593,0.460628,0), (-0.897582,0.440848,0), (-0.90703,0.421067,0), (-0.915955,0.401281,0), (-0.924372,0.381493,0),
                    (-0.93229,0.361711,0), (-0.939712,0.341968,0), (-0.946675,0.322191,0), (-0.953148,0.302505,0), (-0.959188,0.28277,0),
                    (-0.964747,0.263178,0), (-0.969892,0.243537,0), (-0.97458,0.224039,0), (-0.978874,0.204465,0), (-0.982728,0.185054,0),
                    (-0.986207,0.165516,0), (-0.989252,0.146218,0), (-0.991931,0.126776,0), (-0.994191,0.107632,0), (-0.996091,0.088337,0),
                    (-0.99759,0.069387,0), (-0.998743,0.050115,0), (-0.999521,0.030947,0), (-0.999924,0.012345,0)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 3 **********/

            i_CurrentSide = 3;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114062, 0.114063, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114062, 0.114063, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114063, 0.114062, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114062, 0.114063, 0.114062, 0.114063,
                0.114062, 0.114063, 0.114062, 0.114063, 0.114062, 0.114063, 0.114062, 0.114063, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (0,0.020719,-0.999785), (0,0.050856,-0.998706), (0,0.090282,-0.995916), (0,0.119629,-0.992819), (0,0.158779,-0.987314),
                    (0,0.186781,-0.982402), (0,0.222917,-0.974838), (0,0.2492,-0.968452), (0,0.283776,-0.958891), (0,0.307818,-0.951445),
                    (0,0.338206,-0.941072), (0,0.359761,-0.933045), (0,0.387712,-0.92178), (0,0.406721,-0.913553), (0,0.430671,-0.902509),
                    (0,0.447338,-0.894365), (0,0.468771,-0.88332), (0,0.48299,-0.875626), (0,0.500583,-0.865689), (0,0.512589,-0.858634),
                    (0,0.527712,-0.849423), (0,0.537583,-0.843211), (0,0.549534,-0.835471), (0,0.557533,-0.830155), (0,0.567167,-0.823603),
                    (0,0.573239,-0.819388), (0,0.580095,-0.814549), (0,0.584407,-0.811461), (0,0.589031,-0.80811), (0,0.59158,-0.806246),
                    (0,0.593832,-0.804589), (0,0.594712,-0.803939), (0,0.594712,-0.803939), (0,0.593832,-0.804589), (0,0.59158,-0.806246),
                    (0,0.589031,-0.80811), (0,0.584407,-0.811461), (0,0.580095,-0.814549), (0,0.573239,-0.819388), (0,0.567167,-0.823603),
                    (0,0.557533,-0.830155), (0,0.549534,-0.835471), (0,0.537583,-0.843211), (0,0.527712,-0.849423), (0,0.512589,-0.858634),
                    (0,0.500583,-0.865689), (0,0.48299,-0.875626), (0,0.468771,-0.88332), (0,0.447338,-0.894365), (0,0.430671,-0.902509),
                    (0,0.406721,-0.913553), (0,0.387712,-0.92178), (0,0.359761,-0.933045), (0,0.338206,-0.941072), (0,0.307818,-0.951445),
                    (0,0.283776,-0.958891), (0,0.2492,-0.968452), (0,0.222917,-0.974838), (0,0.186781,-0.982402), (0,0.158779,-0.987314),
                    (0,0.119629,-0.992819), (0,0.090282,-0.995916), (0,0.050856,-0.998706), (0,0.020719,-0.999785)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 4 **********/

            i_CurrentSide = 4;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (0.999924,0.012345,0), (0.999521,0.030947,0), (0.998743,0.050115,0), (0.99759,0.069387,0), (0.996091,0.088337,0),
                    (0.994191,0.107632,0), (0.991931,0.126776,0), (0.989252,0.146218,0), (0.986207,0.165516,0), (0.982728,0.185054,0),
                    (0.978874,0.204465,0), (0.97458,0.224039,0), (0.969892,0.243537,0), (0.964747,0.263178,0), (0.959188,0.28277,0),
                    (0.953148,0.302505,0), (0.946675,0.322191,0), (0.939712,0.341968,0), (0.93229,0.361711,0), (0.924372,0.381493,0),
                    (0.915955,0.401281,0), (0.90703,0.421067,0), (0.897582,0.440848,0), (0.887593,0.460628,0), (0.877059,0.480383,0),
                    (0.865962,0.500109,0), (0.85429,0.519796,0), (0.84204,0.539415,0), (0.829191,0.558965,0), (0.815726,0.578439,0),
                    (0.80164,0.597807,0), (0.786948,0.61702,0), (0.771591,0.636119,0), (0.75562,0.65501,0), (0.738995,0.673711,0),
                    (0.721749,0.692155,0), (0.703841,0.710357,0), (0.6853,0.728261,0), (0.666114,0.74585,0), (0.646279,0.763101,0),
                    (0.625791,0.779991,0), (0.60466,0.796484,0), (0.582912,0.812535,0), (0.56055,0.828121,0), (0.537586,0.843209,0),
                    (0.514088,0.857737,0), (0.490031,0.871705,0), (0.465458,0.88507,0), (0.440352,0.897825,0), (0.414825,0.909901,0),
                    (0.388922,0.921271,0), (0.362878,0.931837,0), (0.336312,0.941751,0), (0.309434,0.950921,0), (0.281883,0.959449,0),
                    (0.253949,0.967218,0), (0.22562,0.974215,0), (0.197053,0.980393,0), (0.168848,0.985642,0), (0.140664,0.990057,0),
                    (0.112299,0.993674,0), (0.083426,0.996514,0), (0.055307,0.998469,0), (0.030299,0.999541,0)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 5 **********/

            i_CurrentSide = 5;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562, 0.151563, 0.151562, 0.151562, 0.151563,
                0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562,
                0.151563, 0.151562, 0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563,
                0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151563, 0.151562, 0.151562, 0.151563,
                0.151563, 0.151562, 0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563,
                0.151563, 0.151562, 0.151563, 0.151562, 0.151562, 0.151563, 0.151563, 0.151562, 0.151562, 0.151563,
                0.151563, 0.151562, 0.151563, 0.151562
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (0.034381,0,0.999409), (0.112976,0,0.993598), (0.188169,0,0.982137), (0.243986,0,0.969779), (0.326599,0,0.945163),
                    (0.376425,0,0.926447), (0.437816,0,0.899065), (0.482158,0,0.876084), (0.538099,0,0.842882), (0.575295,0,0.817946),
                    (0.620035,0,0.784574), (0.650527,0,0.759483), (0.687909,0,0.725797), (0.713377,0,0.70078), (0.742178,0,0.670203),
                    (0.762275,0,0.647253), (0.786367,0,0.61776), (0.802289,0,0.596935), (0.820143,0,0.572159), (0.832338,0,0.554269),
                    (0.846765,0,0.531967), (0.855992,0,0.51699), (0.8665,0,0.499178), (0.873386,0,0.487028), (0.881379,0,0.47241),
                    (0.886368,0,0.462981), (0.891808,0,0.452415), (0.89516,0,0.445745), (0.898716,0,0.438532), (0.900658,0,0.434528),
                    (0.902341,0,0.431023), (0.902982,0,0.429678), (0.902982,0,0.429678), (0.902341,0,0.431023), (0.900658,0,0.434528),
                    (0.898716,0,0.438532), (0.89516,0,0.445745), (0.891808,0,0.452415), (0.886368,0,0.462981), (0.881379,0,0.47241),
                    (0.873386,0,0.487028), (0.8665,0,0.499178), (0.855992,0,0.51699), (0.846765,0,0.531967), (0.832338,0,0.554269),
                    (0.820143,0,0.572159), (0.802289,0,0.596935), (0.786367,0,0.61776), (0.762275,0,0.647253), (0.742178,0,0.670203),
                    (0.713377,0,0.70078), (0.687909,0,0.725797), (0.650527,0,0.759483), (0.620035,0,0.784574), (0.575295,0,0.817946),
                    (0.538099,0,0.842882), (0.482158,0,0.876084), (0.437816,0,0.899065), (0.376425,0,0.926447), (0.326599,0,0.945163),
                    (0.243986,0,0.969779), (0.188169,0,0.982137), (0.112976,0,0.993598), (0.034381,0,0.999409)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 6 **********/

            i_CurrentSide = 6;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625, 0.0625,
                0.0625, 0.0625, 0.0625, 0.0625
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (0.030299,-0.999541,0), (0.055307,-0.998469,0), (0.083426,-0.996514,0), (0.112299,-0.993674,0), (0.140664,-0.990057,0),
                    (0.168848,-0.985642,0), (0.197053,-0.980393,0), (0.22562,-0.974215,0), (0.253949,-0.967218,0), (0.281883,-0.959449,0),
                    (0.309434,-0.950921,0), (0.336312,-0.941751,0), (0.362878,-0.931837,0), (0.388922,-0.921271,0), (0.414825,-0.909901,0),
                    (0.440352,-0.897825,0), (0.465458,-0.88507,0), (0.490031,-0.871705,0), (0.514088,-0.857737,0), (0.537586,-0.843209,0),
                    (0.56055,-0.828121,0), (0.582912,-0.812535,0), (0.60466,-0.796484,0), (0.625791,-0.779991,0), (0.646279,-0.763101,0),
                    (0.666114,-0.74585,0), (0.6853,-0.728261,0), (0.703841,-0.710357,0), (0.721749,-0.692155,0), (0.738995,-0.673711,0),
                    (0.75562,-0.65501,0), (0.771591,-0.636119,0), (0.786948,-0.61702,0), (0.80164,-0.597807,0), (0.815726,-0.578439,0),
                    (0.829191,-0.558965,0), (0.84204,-0.539415,0), (0.85429,-0.519796,0), (0.865962,-0.500109,0), (0.877059,-0.480383,0),
                    (0.887593,-0.460628,0), (0.897582,-0.440848,0), (0.90703,-0.421067,0), (0.915955,-0.401281,0), (0.924372,-0.381493,0),
                    (0.93229,-0.361711,0), (0.939712,-0.341968,0), (0.946675,-0.322191,0), (0.953148,-0.302505,0), (0.959188,-0.28277,0),
                    (0.964747,-0.263178,0), (0.969892,-0.243537,0), (0.97458,-0.224039,0), (0.978874,-0.204465,0), (0.982728,-0.185054,0),
                    (0.986207,-0.165516,0), (0.989252,-0.146218,0), (0.991931,-0.126776,0), (0.994191,-0.107632,0), (0.996091,-0.088337,0),
                    (0.99759,-0.069387,0), (0.998743,-0.050115,0), (0.999521,-0.030947,0), (0.999924,-0.012345,0)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            /********** Side 7 **********/

            i_CurrentSide = 7;

            sideSegmentLength[i_CurrentSide] = new double[]
            {
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114063, 0.114062, 0.114063, 0.114062,
                0.114063, 0.114062, 0.114063, 0.114062, 0.114063, 0.114062, 0.114063, 0.114062, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114062, 0.114063, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114063, 0.114062, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114063, 0.114062, 0.114063, 0.114062, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063, 0.114062, 0.114063, 0.114063, 0.114062, 0.114062, 0.114063,
                0.114063, 0.114062, 0.114062, 0.114063
            };

            sideSegmentDir[i_CurrentSide] = new Euc3D.Vector[sideSegmentCount[i_CurrentSide]];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (0,-0.020719,-0.999785), (0,-0.050856,-0.998706), (0,-0.090282,-0.995916), (0,-0.119629,-0.992819), (0,-0.158779,-0.987314),
                    (0,-0.186781,-0.982402), (0,-0.222917,-0.974838), (0,-0.2492,-0.968452), (0,-0.283776,-0.958891), (0,-0.307818,-0.951445),
                    (0,-0.338206,-0.941072), (0,-0.359761,-0.933045), (0,-0.387712,-0.92178), (0,-0.406721,-0.913553), (0,-0.430671,-0.902509),
                    (0,-0.447338,-0.894365), (0,-0.468771,-0.88332), (0,-0.48299,-0.875626), (0,-0.500583,-0.865689), (0,-0.512589,-0.858634),
                    (0,-0.527712,-0.849423), (0,-0.537583,-0.843211), (0,-0.549534,-0.835471), (0,-0.557533,-0.830155), (0,-0.567167,-0.823603),
                    (0,-0.573239,-0.819388), (0,-0.580095,-0.814549), (0,-0.584407,-0.811461), (0,-0.589031,-0.80811), (0,-0.59158,-0.806246),
                    (0,-0.593832,-0.804589), (0,-0.594712,-0.803939), (0,-0.594712,-0.803939), (0,-0.593832,-0.804589), (0,-0.59158,-0.806246),
                    (0,-0.589031,-0.80811), (0,-0.584407,-0.811461), (0,-0.580095,-0.814549), (0,-0.573239,-0.819388), (0,-0.567167,-0.823603),
                    (0,-0.557533,-0.830155), (0,-0.549534,-0.835471), (0,-0.537583,-0.843211), (0,-0.527712,-0.849423), (0,-0.512589,-0.858634),
                    (0,-0.500583,-0.865689), (0,-0.48299,-0.875626), (0,-0.468771,-0.88332), (0,-0.447338,-0.894365), (0,-0.430671,-0.902509),
                    (0,-0.406721,-0.913553), (0,-0.387712,-0.92178), (0,-0.359761,-0.933045), (0,-0.338206,-0.941072), (0,-0.307818,-0.951445),
                    (0,-0.283776,-0.958891), (0,-0.2492,-0.968452), (0,-0.222917,-0.974838), (0,-0.186781,-0.982402), (0,-0.158779,-0.987314),
                    (0,-0.119629,-0.992819), (0,-0.090282,-0.995916), (0,-0.050856,-0.998706), (0,-0.020719,-0.999785)
                };

                for (int i = 0; i < sideSegmentCount[i_CurrentSide]; i++)
                {
                    sideSegmentDir[i_CurrentSide][i] = new Euc3D.Vector(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            #endregion

            #region Input Geometry

            Euc3D.Point[] point = new Euc3D.Point[totalSegmentCount];
            {
                (double, double, double)[] tmp = new (double, double, double)[]
                {
                    (0, 0, 0), (-0.062495, -0.000772, 0), (-0.124965, -0.002706, 0), (-0.187387, -0.005838, 0), (-0.249736, -0.010175, 0),
                    (-0.311992, -0.015696, 0), (-0.374129, -0.022423, 0), (-0.436124, -0.030346, 0), (-0.497953, -0.039485, 0), (-0.559591, -0.04983, 0),
                    (-0.621011, -0.061395, 0), (-0.682191, -0.074174, 0), (-0.743102, -0.088177, 0), (-0.80372, -0.103398, 0), (-0.864017, -0.119847, 0),
                    (-0.923966, -0.13752, 0), (-0.983538, -0.156426, 0), (-1.042705, -0.176563, 0), (-1.101437, -0.197936, 0), (-1.159705, -0.220543, 0),
                    (-1.217478, -0.244387, 0), (-1.274726, -0.269467, 0), (-1.331415, -0.295783, 0), (-1.387514, -0.323336, 0), (-1.442988, -0.352126, 0),
                    (-1.497805, -0.382149, 0), (-1.551927, -0.413406, 0), (-1.60532, -0.445894, 0), (-1.657948, -0.479607, 0), (-1.709772, -0.514542, 0),
                    (-1.760755, -0.550695, 0), (-1.810858, -0.588058, 0), (-1.860042, -0.626621, 0), (-1.908266, -0.666379, 0), (-1.955493, -0.707317, 0),
                    (-2.00168, -0.749424, 0), (-2.046789, -0.792684, 0), (-2.090779, -0.837081, 0), (-2.13361, -0.882597, 0), (-2.175243, -0.929213, 0),
                    (-2.215635, -0.976907, 0), (-2.254747, -1.025656, 0), (-2.292538, -1.075436, 0), (-2.32897, -1.12622, 0), (-2.364005, -1.177977, 0),
                    (-2.397604, -1.230678, 0), (-2.429734, -1.284287, 0), (-2.460361, -1.338768, 0), (-2.489452, -1.394085, 0), (-2.516974, -1.450199, 0),
                    (-2.542901, -1.507068, 0), (-2.567208, -1.564647, 0), (-2.589888, -1.622887, 0), (-2.610908, -1.681747, 0), (-2.630247, -1.741179, 0),
                    (-2.647865, -1.801145, 0), (-2.663737, -1.861596, 0), (-2.677838, -1.922484, 0), (-2.690154, -1.983759, 0), (-2.700707, -2.045361, 0),
                    (-2.709499, -2.10724, 0), (-2.716517, -2.169345, 0), (-2.721731, -2.231627, 0), (-2.725188, -2.294031, 0), (-2.727082, -2.356502, 0),
                    (-2.732293, -2.356502, 0.151472), (-2.749416, -2.356502, 0.302065), (-2.777935, -2.356502, 0.45092), (-2.814914, -2.356502, 0.597902), (-2.864414, -2.356502, 0.741154),
                    (-2.921466, -2.356502, 0.881568), (-2.987822, -2.356502, 1.017832), (-3.0609, -2.356502, 1.150614), (-3.142456, -2.356502, 1.278364), (-3.229648, -2.356502, 1.402333),
                    (-3.323622, -2.356502, 1.521245), (-3.422218, -2.356502, 1.636354), (-3.526479, -2.356502, 1.746358), (-3.6346, -2.356502, 1.85257), (-3.747087, -2.356502, 1.954148),
                    (-3.862619, -2.356502, 2.052247), (-3.981802, -2.356502, 2.145876), (-4.1034, -2.356502, 2.236349), (-4.227703, -2.356502, 2.323067), (-4.353854, -2.356502, 2.407073),
                    (-4.482191, -2.356502, 2.487699), (-4.611928, -2.356502, 2.566056), (-4.743256, -2.356502, 2.641712), (-4.875629, -2.356502, 2.715528), (-5.009214, -2.356502, 2.787128),
                    (-5.143554, -2.356502, 2.857298), (-5.278718, -2.356502, 2.925867), (-5.414391, -2.356502, 2.993425), (-5.550602, -2.356502, 3.05989), (-5.687109, -2.356502, 3.125748),
                    (-5.823869, -2.356502, 3.191075), (-5.960728, -2.356502, 3.256198), (-6.097586, -2.356502, 3.321321), (-6.234347, -2.356502, 3.386648), (-6.370853, -2.356502, 3.452507),
                    (-6.507065, -2.356502, 3.518972), (-6.642737, -2.356502, 3.58653), (-6.777902, -2.356502, 3.655099), (-6.912243, -2.356502, 3.72527), (-7.045826, -2.356502, 3.796869),
                    (-7.178198, -2.356502, 3.870684), (-7.309528, -2.356502, 3.946341), (-7.439263, -2.356502, 4.024697), (-7.567602, -2.356502, 4.105323), (-7.693752, -2.356502, 4.18933),
                    (-7.818056, -2.356502, 4.276048), (-7.939652, -2.356502, 4.36652), (-8.058836, -2.356502, 4.46015), (-8.174368, -2.356502, 4.558249), (-8.286855, -2.356502, 4.659827),
                    (-8.394976, -2.356502, 4.766038), (-8.499238, -2.356502, 4.876042), (-8.597833, -2.356502, 4.991151), (-8.691807, -2.356502, 5.110064), (-8.779, -2.356502, 5.234034),
                    (-8.860556, -2.356502, 5.361783), (-8.933633, -2.356502, 5.494564), (-8.999989, -2.356502, 5.630829), (-9.057041, -2.356502, 5.771243), (-9.106541, -2.356502, 5.914495),
                    (-9.143521, -2.356502, 6.061477), (-9.17204, -2.356502, 6.210332), (-9.189163, -2.356502, 6.360924), (-9.194374, -2.356502, 6.512397), (-9.196267, -2.294031, 6.512397),
                    (-9.199724, -2.231627, 6.512397), (-9.204938, -2.169345, 6.512397), (-9.211957, -2.10724, 6.512397), (-9.220748, -2.045361, 6.512397), (-9.231301, -1.983759, 6.512397),
                    (-9.243617, -1.922484, 6.512397), (-9.257718, -1.861596, 6.512397), (-9.27359, -1.801145, 6.512397), (-9.291208, -1.741179, 6.512397), (-9.310548, -1.681747, 6.512397),
                    (-9.331567, -1.622887, 6.512397), (-9.354247, -1.564647, 6.512397), (-9.378555, -1.507068, 6.512397), (-9.404481, -1.450199, 6.512397), (-9.432003, -1.394085, 6.512397),
                    (-9.461094, -1.338768, 6.512397), (-9.491721, -1.284287, 6.512397), (-9.523852, -1.230678, 6.512397), (-9.557451, -1.177977, 6.512397), (-9.592485, -1.12622, 6.512397),
                    (-9.628917, -1.075436, 6.512397), (-9.666708, -1.025656, 6.512397), (-9.70582, -0.976907, 6.512397), (-9.746213, -0.929213, 6.512397), (-9.787845, -0.882597, 6.512397),
                    (-9.830676, -0.837081, 6.512397), (-9.874666, -0.792684, 6.512397), (-9.919776, -0.749424, 6.512397), (-9.965963, -0.707317, 6.512397), (-10.013189, -0.666379, 6.512397),
                    (-10.061413, -0.626621, 6.512397), (-10.110598, -0.588058, 6.512397), (-10.1607, -0.550695, 6.512397), (-10.211683, -0.514542, 6.512397), (-10.263507, -0.479607, 6.512397),
                    (-10.316135, -0.445894, 6.512397), (-10.369528, -0.413406, 6.512397), (-10.423651, -0.382149, 6.512397), (-10.478467, -0.352126, 6.512397), (-10.533942, -0.323336, 6.512397),
                    (-10.59004, -0.295783, 6.512397), (-10.64673, -0.269467, 6.512397), (-10.703977, -0.244387, 6.512397), (-10.76175, -0.220543, 6.512397), (-10.820018, -0.197936, 6.512397),
                    (-10.87875, -0.176563, 6.512397), (-10.937917, -0.156426, 6.512397), (-10.997489, -0.13752, 6.512397), (-11.057438, -0.119847, 6.512397), (-11.117735, -0.103398, 6.512397),
                    (-11.178353, -0.088177, 6.512397), (-11.239265, -0.074174, 6.512397), (-11.300444, -0.061395, 6.512397), (-11.361865, -0.04983, 6.512397), (-11.423503, -0.039485, 6.512397),
                    (-11.485331, -0.030346, 6.512397), (-11.547327, -0.022423, 6.512397), (-11.609464, -0.015696, 6.512397), (-11.671719, -0.010175, 6.512397), (-11.734069, -0.005838, 6.512397),
                    (-11.79649, -0.002706, 6.512397), (-11.85896, -0.000772, 6.512397), (-11.921455, 0, 6.512397), (-11.921455, 0.002363, 6.398358), (-11.921455, 0.008164, 6.284444),
                    (-11.921455, 0.018462, 6.170848), (-11.921455, 0.032107, 6.057604), (-11.921455, 0.050218, 5.944988), (-11.921455, 0.071523, 5.832933), (-11.921455, 0.096949, 5.721741),
                    (-11.921455, 0.125373, 5.611277), (-11.921455, 0.157742, 5.501903), (-11.921455, 0.192852, 5.393379), (-11.921455, 0.231429, 5.286038), (-11.921455, 0.272464, 5.179613),
                    (-11.921455, 0.316687, 5.074473), (-11.921455, 0.363079, 4.97027), (-11.921455, 0.412202, 4.867327), (-11.921455, 0.463227, 4.765314), (-11.921455, 0.516696, 4.664561),
                    (-11.921455, 0.571787, 4.564684), (-11.921455, 0.628884, 4.465942), (-11.921455, 0.687352, 4.368004), (-11.921455, 0.747544, 4.271116), (-11.921455, 0.808862, 4.174938),
                    (-11.921455, 0.871543, 4.079642), (-11.921455, 0.935137, 3.984952), (-11.921455, 0.99983, 3.891009), (-11.921455, 1.065214, 3.797548), (-11.921455, 1.131381, 3.704639),
                    (-11.921455, 1.19804, 3.612082), (-11.921455, 1.265226, 3.519907), (-11.921455, 1.332704, 3.427944), (-11.921455, 1.400438, 3.33617), (-11.921455, 1.468272, 3.244471),
                    (-11.921455, 1.536106, 3.152773), (-11.921455, 1.60384, 3.060999), (-11.921455, 1.671318, 2.969036), (-11.921455, 1.738504, 2.876861), (-11.921455, 1.805163, 2.784304),
                    (-11.921455, 1.87133, 2.691395), (-11.921455, 1.936715, 2.597933), (-11.921455, 2.001408, 2.503991), (-11.921455, 2.065001, 2.409301), (-11.921455, 2.127682, 2.314005),
                    (-11.921455, 2.189, 2.217827), (-11.921455, 2.249193, 2.120939), (-11.921455, 2.30766, 2.023001), (-11.921455, 2.364757, 1.924259), (-11.921455, 2.419848, 1.824383),
                    (-11.921455, 2.473318, 1.723629), (-11.921455, 2.524342, 1.621616), (-11.921455, 2.573466, 1.518673), (-11.921455, 2.619857, 1.414471), (-11.921455, 2.664081, 1.30933),
                    (-11.921455, 2.705116, 1.202905), (-11.921455, 2.743692, 1.095564), (-11.921455, 2.778803, 0.98704), (-11.921455, 2.811171, 0.877666), (-11.921455, 2.839595, 0.767203),
                    (-11.921455, 2.865022, 0.65601), (-11.921455, 2.886326, 0.543955), (-11.921455, 2.904437, 0.431339), (-11.921455, 2.918083, 0.318095), (-11.921455, 2.92838, 0.204499),
                    (-11.921455, 2.934181, 0.090585), (-11.921455, 2.936544, -0.023454), (-11.85896, 2.937316, -0.023454), (-11.79649, 2.93925, -0.023454), (-11.734069, 2.942382, -0.023454),
                    (-11.671719, 2.946719, -0.023454), (-11.609464, 2.95224, -0.023454), (-11.547327, 2.958967, -0.023454), (-11.485331, 2.966891, -0.023454), (-11.423503, 2.976029, -0.023454),
                    (-11.361865, 2.986374, -0.023454), (-11.300444, 2.99794, -0.023454), (-11.239265, 3.010719, -0.023454), (-11.178353, 3.024721, -0.023454), (-11.117735, 3.039942, -0.023454),
                    (-11.057438, 3.056391, -0.023454), (-10.997489, 3.074064, -0.023454), (-10.937917, 3.092971, -0.023454), (-10.87875, 3.113108, -0.023454), (-10.820018, 3.134481, -0.023454),
                    (-10.76175, 3.157088, -0.023454), (-10.703977, 3.180931, -0.023454), (-10.64673, 3.206011, -0.023454), (-10.59004, 3.232328, -0.023454), (-10.533942, 3.259881, -0.023454),
                    (-10.478467, 3.28867, -0.023454), (-10.423651, 3.318694, -0.023454), (-10.369528, 3.349951, -0.023454), (-10.316135, 3.382438, -0.023454), (-10.263507, 3.416151, -0.023454),
                    (-10.211683, 3.451087, -0.023454), (-10.1607, 3.487239, -0.023454), (-10.110598, 3.524602, -0.023454), (-10.061413, 3.563166, -0.023454), (-10.013189, 3.602923, -0.023454),
                    (-9.965963, 3.643861, -0.023454), (-9.919776, 3.685968, -0.023454), (-9.874666, 3.729228, -0.023454), (-9.830676, 3.773625, -0.023454), (-9.787845, 3.819142, -0.023454),
                    (-9.746213, 3.865757, -0.023454), (-9.70582, 3.913451, -0.023454), (-9.666708, 3.962201, -0.023454), (-9.628917, 4.011981, -0.023454), (-9.592485, 4.062764, -0.023454),
                    (-9.557451, 4.114522, -0.023454), (-9.523852, 4.167222, -0.023454), (-9.491721, 4.220831, -0.023454), (-9.461094, 4.275312, -0.023454), (-9.432003, 4.330629, -0.023454),
                    (-9.404481, 4.386743, -0.023454), (-9.378555, 4.443612, -0.023454), (-9.354247, 4.501192, -0.023454), (-9.331567, 4.559431, -0.023454), (-9.310548, 4.618291, -0.023454),
                    (-9.291208, 4.677723, -0.023454), (-9.27359, 4.737689, -0.023454), (-9.257718, 4.79814, -0.023454), (-9.243617, 4.859029, -0.023454), (-9.231301, 4.920303, -0.023454),
                    (-9.220748, 4.981906, -0.023454), (-9.211957, 5.043784, -0.023454), (-9.204938, 5.105889, -0.023454), (-9.199724, 5.168171, -0.023454), (-9.196267, 5.230575, -0.023454),
                    (-9.194374, 5.293047, -0.023454), (-9.189163, 5.293047, 0.128019), (-9.17204, 5.293047, 0.278611), (-9.143521, 5.293047, 0.427466), (-9.106541, 5.293047, 0.574448),
                    (-9.057041, 5.293047, 0.7177), (-8.999989, 5.293047, 0.858114), (-8.933633, 5.293047, 0.994379), (-8.860556, 5.293047, 1.12716), (-8.779, 5.293047, 1.254909),
                    (-8.691807, 5.293047, 1.378879), (-8.597833, 5.293047, 1.497792), (-8.499238, 5.293047, 1.612901), (-8.394976, 5.293047, 1.722905), (-8.286855, 5.293047, 1.829116),
                    (-8.174368, 5.293047, 1.930694), (-8.058836, 5.293047, 2.028793), (-7.939652, 5.293047, 2.122423), (-7.818056, 5.293047, 2.212895), (-7.693752, 5.293047, 2.299613),
                    (-7.567602, 5.293047, 2.383619), (-7.439263, 5.293047, 2.464246), (-7.309528, 5.293047, 2.542602), (-7.178198, 5.293047, 2.618259), (-7.045826, 5.293047, 2.692074),
                    (-6.912243, 5.293047, 2.763673), (-6.777902, 5.293047, 2.833844), (-6.642737, 5.293047, 2.902413), (-6.507065, 5.293047, 2.969971), (-6.370853, 5.293047, 3.036436),
                    (-6.234347, 5.293047, 3.102294), (-6.097586, 5.293047, 3.167622), (-5.960728, 5.293047, 3.232745), (-5.823869, 5.293047, 3.297868), (-5.687109, 5.293047, 3.363195),
                    (-5.550602, 5.293047, 3.429053), (-5.414391, 5.293047, 3.495518), (-5.278718, 5.293047, 3.563076), (-5.143554, 5.293047, 3.631645), (-5.009214, 5.293047, 3.701815),
                    (-4.875629, 5.293047, 3.773415), (-4.743256, 5.293047, 3.847231), (-4.611928, 5.293047, 3.922887), (-4.482191, 5.293047, 4.001244), (-4.353854, 5.293047, 4.08187),
                    (-4.227703, 5.293047, 4.165876), (-4.1034, 5.293047, 4.252594), (-3.981802, 5.293047, 4.343067), (-3.862619, 5.293047, 4.436696), (-3.747087, 5.293047, 4.534795),
                    (-3.6346, 5.293047, 4.636373), (-3.526479, 5.293047, 4.742585), (-3.422218, 5.293047, 4.852588), (-3.323622, 5.293047, 4.967698), (-3.229648, 5.293047, 5.08661),
                    (-3.142456, 5.293047, 5.210579), (-3.0609, 5.293047, 5.338329), (-2.987822, 5.293047, 5.471111), (-2.921466, 5.293047, 5.607375), (-2.864414, 5.293047, 5.747789),
                    (-2.814914, 5.293047, 5.891041), (-2.777935, 5.293047, 6.038023), (-2.749416, 5.293047, 6.186878), (-2.732293, 5.293047, 6.337471), (-2.727082, 5.293047, 6.488943),
                    (-2.725188, 5.230575, 6.488943), (-2.721731, 5.168171, 6.488943), (-2.716517, 5.105889, 6.488943), (-2.709499, 5.043784, 6.488943), (-2.700707, 4.981906, 6.488943),
                    (-2.690154, 4.920303, 6.488943), (-2.677838, 4.859029, 6.488943), (-2.663737, 4.79814, 6.488943), (-2.647865, 4.737689, 6.488943), (-2.630247, 4.677723, 6.488943),
                    (-2.610908, 4.618291, 6.488943), (-2.589888, 4.559431, 6.488943), (-2.567208, 4.501192, 6.488943), (-2.542901, 4.443612, 6.488943), (-2.516974, 4.386743, 6.488943),
                    (-2.489452, 4.330629, 6.488943), (-2.460361, 4.275312, 6.488943), (-2.429734, 4.220831, 6.488943), (-2.397604, 4.167222, 6.488943), (-2.364005, 4.114522, 6.488943),
                    (-2.32897, 4.062764, 6.488943), (-2.292538, 4.011981, 6.488943), (-2.254747, 3.962201, 6.488943), (-2.215635, 3.913451, 6.488943), (-2.175243, 3.865757, 6.488943),
                    (-2.13361, 3.819142, 6.488943), (-2.090779, 3.773625, 6.488943), (-2.046789, 3.729228, 6.488943), (-2.00168, 3.685968, 6.488943), (-1.955493, 3.643861, 6.488943),
                    (-1.908266, 3.602923, 6.488943), (-1.860042, 3.563166, 6.488943), (-1.810858, 3.524602, 6.488943), (-1.760755, 3.487239, 6.488943), (-1.709772, 3.451087, 6.488943),
                    (-1.657948, 3.416151, 6.488943), (-1.60532, 3.382438, 6.488943), (-1.551927, 3.349951, 6.488943), (-1.497805, 3.318694, 6.488943), (-1.442988, 3.28867, 6.488943),
                    (-1.387514, 3.259881, 6.488943), (-1.331415, 3.232328, 6.488943), (-1.274726, 3.206011, 6.488943), (-1.217478, 3.180931, 6.488943), (-1.159705, 3.157088, 6.488943),
                    (-1.101437, 3.134481, 6.488943), (-1.042705, 3.113108, 6.488943), (-0.983538, 3.092971, 6.488943), (-0.923966, 3.074064, 6.488943), (-0.864017, 3.056391, 6.488943),
                    (-0.80372, 3.039942, 6.488943), (-0.743102, 3.024721, 6.488943), (-0.682191, 3.010719, 6.488943), (-0.621011, 2.99794, 6.488943), (-0.559591, 2.986374, 6.488943),
                    (-0.497953, 2.976029, 6.488943), (-0.436124, 2.966891, 6.488943), (-0.374129, 2.958967, 6.488943), (-0.311992, 2.95224, 6.488943), (-0.249736, 2.946719, 6.488943),
                    (-0.187387, 2.942382, 6.488943), (-0.124965, 2.93925, 6.488943), (-0.062495, 2.937316, 6.488943), (0, 2.936544, 6.488943), (0, 2.934181, 6.374904),
                    (0, 2.92838, 6.26099), (0, 2.918083, 6.147394), (0, 2.904437, 6.03415), (0, 2.886326, 5.921534), (0, 2.865022, 5.809479),
                    (0, 2.839595, 5.698286), (0, 2.811171, 5.587823), (0, 2.778803, 5.478449), (0, 2.743692, 5.369925), (0, 2.705116, 5.262584),
                    (0, 2.664081, 5.156159), (0, 2.619857, 5.051018), (0, 2.573466, 4.946816), (0, 2.524342, 4.843873), (0, 2.473318, 4.74186),
                    (0, 2.419848, 4.641106), (0, 2.364757, 4.54123), (0, 2.30766, 4.442488), (0, 2.249193, 4.34455), (0, 2.189, 4.247662),
                    (0, 2.127682, 4.151484), (0, 2.065001, 4.056188), (0, 2.001408, 3.961498), (0, 1.936715, 3.867556), (0, 1.87133, 3.774094),
                    (0, 1.805163, 3.681185), (0, 1.738504, 3.588628), (0, 1.671318, 3.496453), (0, 1.60384, 3.40449), (0, 1.536106, 3.312716),
                    (0, 1.468272, 3.221018), (0, 1.400438, 3.129319), (0, 1.332704, 3.037545), (0, 1.265226, 2.945582), (0, 1.19804, 2.853407),
                    (0, 1.131381, 2.76085), (0, 1.065214, 2.667941), (0, 0.99983, 2.57448), (0, 0.935137, 2.480537), (0, 0.871543, 2.385847),
                    (0, 0.808862, 2.290551), (0, 0.747544, 2.194373), (0, 0.687352, 2.097485), (0, 0.628884, 1.999547), (0, 0.571787, 1.900805),
                    (0, 0.516696, 1.800928), (0, 0.463227, 1.700175), (0, 0.412202, 1.598162), (0, 0.363079, 1.495219), (0, 0.316687, 1.391016),
                    (0, 0.272464, 1.285876), (0, 0.231429, 1.179451), (0, 0.192852, 1.07211), (0, 0.157742, 0.963586), (0, 0.125373, 0.854212),
                    (0, 0.096949, 0.743748), (0, 0.071523, 0.632556), (0, 0.050218, 0.520501), (0, 0.032107, 0.407885), (0, 0.018462, 0.294641),
                    (0, 0.008164, 0.181045), (0, 0.002363, 0.067131)
                };

                for (int i = 0; i < totalSegmentCount; i++)
                {
                    point[i] = new Euc3D.Point(tmp[i].Item1, tmp[i].Item2, tmp[i].Item3);
                }
            }

            #endregion

            #region Declaration of the Solver

            double tolerance = 0.001;
            int maxIter = 1000;  // Useless as long as GPA is neing debuged
            GuidedProjectionAlgorithm gpa = new GuidedProjectionAlgorithm(tolerance, maxIter);

            #endregion

            #region Set Variables

            /********** Vertices **********/

            int vertexDimension = 3;
            VariableSet vertices = gpa.AddVariableSet(vertexDimension, totalSegmentCount);
            for (int i = 0; i < totalSegmentCount; i++) { vertices.AddVariable(point[i].GetCoordinates()); }


            /********** Side Length **********/

            VariableSet lengths = gpa.AddVariableSet(1, totalSegmentCount);
            for (int i = 0; i < totalSegmentCount; i++) { lengths.AddVariable(point[i].DistanceTo(point[(i + 1) % totalSegmentCount])); }


            /********** Dummy variable (for LowerBound Constraint) **********/
            /*
                        VariableSet dummy = gpa.AddVariableSet(1, totalSegmentCount);
                        for (int i = 0; i < totalSegmentCount; i++) { dummy.AddVariable(1.0 *//* Random Value*//* ); }
            */

            #endregion

            #region Set Energy

            /********** Target Dir **********/

            int segmentCounter = 0;
            for (int i_Side = 0; i_Side < sideCount; i_Side++)
            {
                for (int i_SideSegment = 0; i_SideSegment < sideSegmentCount[i_Side]; i_SideSegment++)
                {
                    SegmentParallelity energyType = new SegmentParallelity(sideSegmentDir[i_Side][i_SideSegment].GetCoordinates());
                    List<(VariableSet, int)> variables = new List<(VariableSet, int)> {
                        (vertices, segmentCounter), (vertices, (segmentCounter + 1) % vertices.VariableCount),
                        (lengths, segmentCounter)
                    };

                    gpa.AddEnergy(energyType, variables, 50.0);

                    segmentCounter++;
                }
            }

            /********** Target Summed Length **********/

            segmentCounter = 0;
            for (int i_Side = 0; i_Side < sideCount; i_Side++)
            {
                SummedValue summedValue = new SummedValue(sideLength[i_Side], sideSegmentCount[i_Side]);

                List<(VariableSet, int)> variables = new List<(VariableSet, int)>();
                for (int i_SideSegment = 0; i_SideSegment < sideSegmentCount[i_Side]; i_SideSegment++)
                {
                    variables.Add((lengths, segmentCounter));

                    segmentCounter++;
                }

                gpa.AddEnergy(summedValue, variables, 5.0);
            }

            #endregion

            #region Set Constraints

            /********** Coherent Length **********/

            segmentCounter = 0;
            CoherentLength quadraticConstraint = new CoherentLength(vertexDimension);
            for (int i_Side = 0; i_Side < sideCount; i_Side++)
            {
                for (int i_SideSegment = 0; i_SideSegment < sideSegmentCount[i_Side]; i_SideSegment++)
                {
                    List<(VariableSet, int)> variables = new List<(VariableSet, int)> {
                        (vertices, segmentCounter), (vertices, (segmentCounter + 1) % vertices.VariableCount),
                        (lengths, segmentCounter)
                    };

                    gpa.AddConstraint(quadraticConstraint, variables, 100.0);

                    segmentCounter++;
                }
            }

            /********** Target Segment Length **********/

            segmentCounter = 0;
            for (int i_Side = 0; i_Side < sideCount; i_Side++)
            {
                for (int i_SideSegment = 0; i_SideSegment < sideSegmentCount[i_Side]; i_SideSegment++)
                {
                    SegmentLength segmentLength = new SegmentLength(sideSegmentLength[i_Side][i_SideSegment], vertexDimension);
                    List<(VariableSet, int)> variables = new List<(VariableSet, int)> {
                        (vertices, segmentCounter), (vertices, (segmentCounter + 1) % vertices.VariableCount),
                    };

                    gpa.AddConstraint(segmentLength, variables, 1.0);

                    segmentCounter++;
                }
            }


            /********** Length Lower Bound **********/
            /*
                        LowerBound lowerBound = new LowerBound(1.0);
                        for (int i_Length = 0; i_Length < lengths.VariableCount; i_Length++)
                        {
                            List<(VariableSet, int)> variables = new List<(VariableSet, int)>{
                                (lengths, i_Length), (dummy, i_Length)
                            };

                            gpa.AddConstraint(lowerBound, variables, 0.01);
                        }
            */
            #endregion

            #region Launch

            gpa.InitialiseX();

            for (int j = 0; j < 3 * totalSegmentCount; j++)
            {
                System.Console.Write(String.Format("{0:0.00000} ", gpa.X[j]));
            }

            System.Console.WriteLine();
            System.Console.WriteLine();
            System.Console.WriteLine();

            for (int i = 0; i < gpa.MaxIteration; i++)
            {
                gpa.RunIteration(true);
            }

            for (int j = 0; j < 3 * totalSegmentCount; j++)
            {
                System.Console.Write(String.Format("{0:0.00000} ", gpa.X[j]));
            }

            System.Console.WriteLine();
            System.Console.WriteLine();
            System.Console.WriteLine();

            for (int j = 3 * totalSegmentCount; j < 4 * totalSegmentCount; j++)
            {
                System.Console.Write(String.Format("{0:0.00000} ", gpa.X[j]));
            }

            System.Console.WriteLine();
            System.Console.WriteLine();
            System.Console.WriteLine();

            #endregion
        }
    }


    /// <summary>
    /// Energy enforcing the sum of scalar variables to equal a given value.
    /// </summary>
    internal class SummedValue : IEnergyType
    {
        #region Properties

        /// <inheritdoc cref="IEnergyType.LocalKi"/>
        public SparseVector LocalKi { get; }

        /// <inheritdoc cref="IEnergyType.Si"/>
        public double Si { get; }

        #endregion

        #region Constructors

        /// <summary>
        /// Initialises a new instance of the <see cref="SummedValue"/> class.
        /// </summary>
        /// <param name="targetValue"> Target value for the sum. </param>
        /// <param name="count"> Number of scalar value to sum.. </param>
        public SummedValue(double targetValue, int count)
        {
            /******************** Define LocalKi ********************/

            LocalKi = new SparseVector(count);

            for (int i = 0; i < count; i++) { LocalKi[i] = 1.0; }


            /******************** Define Si ********************/

            Si = targetValue;
        }

        #endregion        
    }

    /// <summary>
    /// Constraint enforcing a segment defined from two point variables, <em>pi</em> and <em>pj</em>, to have a given length <em>l</em> (computed with euclidean norm).
    /// </summary>
    /// <remarks> The vector xReduced = [pi, pj].</remarks>
    internal class SegmentLength : IQuadraticConstraintType
    {
        #region Properties

        /// <inheritdoc cref="IQuadraticConstraintType.LocalHi"/>
        public SparseMatrix LocalHi { get; }

        /// <inheritdoc cref="IQuadraticConstraintType.LocalBi"/>
        public SparseVector LocalBi { get; }

        /// <inheritdoc cref="IQuadraticConstraintType.Ci"/>
        public double Ci { get; }

        #endregion

        #region Constructors

        /// <summary>
        /// Initialises a new instance of the <see cref="CoherentLength"/> class.
        /// </summary>
        /// <param name="targetLength"> Target length for the vector. </param>
        /// <param name="spaceDimension"> Dimension of the space containing the points. </param>
        public SegmentLength(double targetLength, int spaceDimension = 3)
        {
            /******************** Define LocalHi ********************/
            DictionaryOfKeys dok_Hi = new DictionaryOfKeys(4*spaceDimension);
            for (int i = 0; i < spaceDimension; i++)
            {
                dok_Hi.Add(2, i, i); dok_Hi.Add(2, spaceDimension + i, spaceDimension + i);
                dok_Hi.Add(-2, spaceDimension + i, i); dok_Hi.Add(-2, i, spaceDimension + i);
            }

            LocalHi = new CompressedColumn(2 * spaceDimension, 2 * spaceDimension, dok_Hi);


            /******************** Define LocalBi ********************/

            LocalBi = null;


            /******************** Define Ci ********************/
            Ci = -targetLength * targetLength;
        }

        #endregion
    }
}
